{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "CMake Launch",
            "type": "cppdbg",
            "request": "launch",
            // Resolved by CMake Tools:
            "program": "${command:cmake.launchTargetPath}",
            // To pass more than one argument: ./ca -n 50 example01.o, 
            // each argument needs to be a string
            // Only input params
            "args": ["-i", "${workspaceFolder}/sample_input/example02.o"],         // change this depending on your input file
            // Include Data Mem segment
            // "args": ["-s", "0x10000000", "-e", "0x10000010", "-i", "${workspaceFolder}/sample_input/example02.o"],         // change this depending on your input file
            // Include Text Mem segment
            // "args": ["-s", "0x400000", "-e", "0x400020", "-i", "${workspaceFolder}/sample_input/example02.o"],         // change this depending on your input file
            // Include Text Mem segment + RegisterDump + Debug
            // "args": ["-rd", "-s", "0x400000", "-e", "0x400020", "-i", "${workspaceFolder}/sample_input/example02.o"],         // change this depending on your input file
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [
                {
                    // add the directory where our target was built to the PATHs
                    // it gets resolved by CMake Tools:
                    "name": "PATH",
                    "value": "$PATH:${command:cmake.launchTargetDirectory}"
                },
                {
                    "name": "OTHER_VALUE",
                    "value": "Something something"
                }
            ],
            "externalConsole": false,
            "MIMode": "gdb",    // Linux, WSL
            // "MIMode": "lldb",      // Mac
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        },
        {
            "name": "CMake Launch Mac",
            "type": "cppdbg",
            "request": "launch",
            // Resolved by CMake Tools:
            "program": "${command:cmake.launchTargetPath}",
            // To pass more than one argument: ./ca -n 50 example01.o, 
            // each argument needs to be a string
            "args": ["-i", "${workspaceFolder}/sample_input/example02.o"],         // change this depending on your input file
            // Include Data Mem segment
            // "args": ["-s", "0x10000000", "-e", "0x10000010", "-i", "${workspaceFolder}/sample_input/example02.o"],         // change this depending on your input file
            // Include Text Mem segment
            // "args": ["-s", "0x400000", "-e", "0x400020", "-i", "${workspaceFolder}/sample_input/example02.o"],         // change this depending on your input file
            // Include Text Mem segment + RegisterDump + Debug
            // "args": ["-rd", "-s", "0x400000", "-e", "0x400020", "-i", "${workspaceFolder}/sample_input/example02.o"],         // change this depending on your input file
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [
                {
                    // add the directory where our target was built to the PATHs
                    // it gets resolved by CMake Tools:
                    "name": "PATH",
                    "value": "$PATH:${command:cmake.launchTargetDirectory}"
                },
                {
                    "name": "OTHER_VALUE",
                    "value": "Something something"
                }
            ],
            "externalConsole": false,
            // "MIMode": "gdb",    // Linux, WSL
            "MIMode": "lldb",      // Mac
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        }
    ]
}